/*
 * Name Flip Frauenzimmer
 * Email: ffrauenzimmer@ucsd.edu
 * PID: A17685777
 * Sources Used: JDK 17 Documentation, PA5 Write-up
 * 
 * This file is for CSE 12 PA5 in Spring 2023,
 * and contains the implementation of the Student class.
 */

import java.util.Objects;

/**
 * Class that defines the Student object and several methods
 * regarding it's implementation.
 * 
 * Instance Variables:
 * firstName - String representing student's first name
 * lastName - String representing student's last name
 * PID - String representing student's unique PID
 */
public class Student implements Comparable<Student>{
    private final String firstName;
    private final String lastName;
    private final String PID;

    /**
     * Constructor that initializes the student’s information.
     * 
     * @param firstName String representing student's first name
     * @param lastName String representing student's last name
     * @param PID String representing student's unique PID
     */
    public Student(String firstName, String lastName, String PID) {
        if (firstName == null || lastName == null || PID == null) {
            throw new IllegalArgumentException();
        }
        this.firstName = firstName;
        this.lastName = lastName;
        this.PID = PID;
    }

    /**
     * Return the student’s first name
     * 
     * @return The student’s first name
     */
    public String getFirstName() {
        return this.firstName;
    }

    /**
     * Return the student’s last name
     * 
     * @return The student's last name
     */
    public String getLastName(){
        return this.lastName;
    }

    /**
     * Return the student’s PID
     * 
     * @return the student’s PID
     */
    public String getPID() {
        return this.PID;
    }

    /**
     * Determins if object o is not null, a Student object, and 
     * if all instance variables are equal to current Student object.
     * 
     * @param o Object to be compared to
     * @return True if meets above conditions, false otherwise
     */
    @Override
    public boolean equals(Object o) {
        if (o != null && o instanceof Student) {
            Student studentThis = this;
            Student studentOther = (Student) o;
            if (studentOther.firstName.equals(studentThis.firstName) 
                    && studentOther.lastName.equals(studentThis.lastName) 
                    && studentOther.PID.equals(studentThis.PID)) { 
                return true;
            }
        }
        return false;
    }

    /**
     * The hash function should generate a hash value in the order 
     * of the student’s firstName, lastName, and PID.
     * 
     * @return the hash value generated by the built-in Objects.hash function
     */
    @Override
    public int hashCode() {
        return Objects.hash(this.firstName, this.lastName, this.PID);
    }

    /**
     * Compare this with another Student in the order of 
     * lastName, firstName, and PID, using String::compareTo.
     * 
     * @param o Student to be compared to
     * @return Value of String::compareTo comparing this and o Student.
     */
    public int compareTo(Student o) {
        if (o == null) {
            throw new NullPointerException();
        }
        if (this.lastName.compareTo(o.lastName) != 0) {
            return this.lastName.compareTo(o.lastName);
        }
        else if (this.firstName.compareTo(o.firstName) != 0) {
            return this.firstName.compareTo(o.firstName);
        }
        else if (this.PID.compareTo(o.PID) != 0) {
            return this.PID.compareTo(o.PID);
        }
        return 0;
    }
}